name: Daily Update
on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Tous les jours Ã  2h du matin

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          # Important: create-pull-request needs push access
          persist-credentials: true

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Download BGA data
        run: |
          echo "Downloading beta games list..."
          curl -s -o data_beta.html https://fr.boardgamearena.com/gamelist?isBetaStatus= || {
            echo "Failed to download beta games data"
            exit 1
          }
          
          echo "Downloading released games list..."
          curl -s -o data.html https://fr.boardgamearena.com/gamelist?allGames= || {
            echo "Failed to download released games data"
            exit 1
          }

      - name: Extract and process game data
        run: |
          # Extract game names using grep - simple and fast
          grep -oP '"name":"[^"]+","display_name' data_beta.html | sed 's/"name":"\([^"]*\)","display_name/\1/' > names_beta.txt || true
          grep -oP '"name":"[^"]+","display_name' data.html | sed 's/"name":"\([^"]*\)","display_name/\1/' > names.txt || true
          
          # Merge and deduplicate
          cat names_beta.txt names.txt | sort | uniq > merged_names.txt
          
          # Show statistics
          BETA_COUNT=$(wc -l < names_beta.txt 2>/dev/null || echo 0)
          RELEASED_COUNT=$(wc -l < names.txt 2>/dev/null || echo 0)
          TOTAL_UNIQUE=$(wc -l < merged_names.txt 2>/dev/null || echo 0)
          
          echo "Statistics:"
          echo "- Beta games: $BETA_COUNT"
          echo "- Released games: $RELEASED_COUNT"
          echo "- Total unique games: $TOTAL_UNIQUE"
          
          # Create JSON structure
          jq -Rn '[inputs | {(.): ""}] | add' merged_names.txt > new_games.json

      - name: Merge with existing games.json
        run: |
          echo "Merging with existing games.json..."
          # IMPORTANT: L'ordre est crucial pour prÃ©server les valeurs existantes
          # .[0] = new_games.json (nouveaux jeux)
          # .[1] = assets/games.json (existant avec IDs)
          # Le * fait que les valeurs de droite (.[1]) Ã©crasent celles de gauche
          jq -s '.[0] * (.[1] // {})' new_games.json assets/games.json > temp.json
          
          # Trier le JSON par ordre alphabÃ©tique des clÃ©s
          jq -S '.' temp.json > assets/games.json
          
          # Count changes
          NEW_COUNT=$(jq -r 'keys | length' new_games.json)
          TOTAL_COUNT=$(jq -r 'keys | length' assets/games.json)
          echo "Total games in final JSON: $TOTAL_COUNT"
          
          # Clean up working files
          rm -f data.html data_beta.html names.txt names_beta.txt merged_names.txt new_games.json

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet assets/games.json; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff --stat assets/games.json
          fi

      - name: Update version in package.json
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Extract current version
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          jq --arg v "$NEW_VERSION" '.version = $v' package.json > temp.json
          mv temp.json package.json

      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git add assets/games.json package.json
          git commit -m "chore: update games.json with latest BGA games
          
          - Updated from BoardGameArena (beta + final released games)
          - Bumped version to $(jq -r '.version' package.json)
          - Sorted games alphabetically
          - Automated daily update"

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update/games-json-${{ github.run_id }}
          base: main
          title: "ðŸŽ² Daily update of games.json"
          body: |
            ## Automated BGA Games Update
            
            This PR updates the `games.json` file with the latest games from BoardGameArena.
            
            ### Changes
            - Updated game list from BGA (beta games + final released games)
            - Preserved existing game mappings
            - Added any new games found
            - Sorted games alphabetically by name
            - Bumped version patch number
            
            ### Modified files
            - `assets/games.json` - Updated game list
            - `package.json` - Version bump
            
            ### Source URLs
            - [Beta games](https://fr.boardgamearena.com/gamelist?isBetaStatus=) - Games currently in beta testing
            - [Released games](https://fr.boardgamearena.com/gamelist?allGames=) - Games officially released
            
            ---
            *This is an automated pull request generated by the daily update workflow.*
          labels: |
            automated
            data-update
          assignees: therealhnk

      - name: Cleanup
        if: always()
        run: |
          # Remove all working files to ensure they don't end up in the PR
          rm -f data.html data_beta.html names.txt names_beta.txt merged_names.txt new_games.json temp.json